/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as PrivateRouteRouteImport } from './routes/_private/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PrivateHomeRootRouteImport } from './routes/_private/home-root'
import { Route as PrivateWWorkspaceIdRouteRouteImport } from './routes/_private/w.$workspaceId/route'
import { Route as PrivateWWorkspaceIdIndexRouteImport } from './routes/_private/w.$workspaceId/index'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivateRouteRoute = PrivateRouteRouteImport.update({
  id: '/_private',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivateHomeRootRoute = PrivateHomeRootRouteImport.update({
  id: '/home-root',
  path: '/home-root',
  getParentRoute: () => PrivateRouteRoute,
} as any)
const PrivateWWorkspaceIdRouteRoute =
  PrivateWWorkspaceIdRouteRouteImport.update({
    id: '/w/$workspaceId',
    path: '/w/$workspaceId',
    getParentRoute: () => PrivateRouteRoute,
  } as any)
const PrivateWWorkspaceIdIndexRoute =
  PrivateWWorkspaceIdIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => PrivateWWorkspaceIdRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/home-root': typeof PrivateHomeRootRoute
  '/w/$workspaceId': typeof PrivateWWorkspaceIdRouteRouteWithChildren
  '/w/$workspaceId/': typeof PrivateWWorkspaceIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/home-root': typeof PrivateHomeRootRoute
  '/w/$workspaceId': typeof PrivateWWorkspaceIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_private': typeof PrivateRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/_private/home-root': typeof PrivateHomeRootRoute
  '/_private/w/$workspaceId': typeof PrivateWWorkspaceIdRouteRouteWithChildren
  '/_private/w/$workspaceId/': typeof PrivateWWorkspaceIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/home-root'
    | '/w/$workspaceId'
    | '/w/$workspaceId/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/home-root' | '/w/$workspaceId'
  id:
    | '__root__'
    | '/'
    | '/_private'
    | '/login'
    | '/_private/home-root'
    | '/_private/w/$workspaceId'
    | '/_private/w/$workspaceId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PrivateRouteRoute: typeof PrivateRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_private': {
      id: '/_private'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_private/home-root': {
      id: '/_private/home-root'
      path: '/home-root'
      fullPath: '/home-root'
      preLoaderRoute: typeof PrivateHomeRootRouteImport
      parentRoute: typeof PrivateRouteRoute
    }
    '/_private/w/$workspaceId': {
      id: '/_private/w/$workspaceId'
      path: '/w/$workspaceId'
      fullPath: '/w/$workspaceId'
      preLoaderRoute: typeof PrivateWWorkspaceIdRouteRouteImport
      parentRoute: typeof PrivateRouteRoute
    }
    '/_private/w/$workspaceId/': {
      id: '/_private/w/$workspaceId/'
      path: '/'
      fullPath: '/w/$workspaceId/'
      preLoaderRoute: typeof PrivateWWorkspaceIdIndexRouteImport
      parentRoute: typeof PrivateWWorkspaceIdRouteRoute
    }
  }
}

interface PrivateWWorkspaceIdRouteRouteChildren {
  PrivateWWorkspaceIdIndexRoute: typeof PrivateWWorkspaceIdIndexRoute
}

const PrivateWWorkspaceIdRouteRouteChildren: PrivateWWorkspaceIdRouteRouteChildren =
  {
    PrivateWWorkspaceIdIndexRoute: PrivateWWorkspaceIdIndexRoute,
  }

const PrivateWWorkspaceIdRouteRouteWithChildren =
  PrivateWWorkspaceIdRouteRoute._addFileChildren(
    PrivateWWorkspaceIdRouteRouteChildren,
  )

interface PrivateRouteRouteChildren {
  PrivateHomeRootRoute: typeof PrivateHomeRootRoute
  PrivateWWorkspaceIdRouteRoute: typeof PrivateWWorkspaceIdRouteRouteWithChildren
}

const PrivateRouteRouteChildren: PrivateRouteRouteChildren = {
  PrivateHomeRootRoute: PrivateHomeRootRoute,
  PrivateWWorkspaceIdRouteRoute: PrivateWWorkspaceIdRouteRouteWithChildren,
}

const PrivateRouteRouteWithChildren = PrivateRouteRoute._addFileChildren(
  PrivateRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PrivateRouteRoute: PrivateRouteRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
